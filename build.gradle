buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.6'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
    }
} 

apply plugin: 'java'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'maven'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group               = "co.paralleluniverse"
version             = "0.7.3-SNAPSHOT"
status              = "integration"
description         = "Quasar fat JAR"
ext.vendor          = "Parallel Universe Software Co."

ext.java8 = System.properties['java.version'].startsWith('1.8')

ext.quasarFatJar = "${rootProject.projectDir}/build/libs/quasar-fatjar-${version}${ext.java8 ? "-jdk8" : ""}.jar" // project(':quasar-core').jar.archivePath

ext.quasarVer       = '0.7.3-SNAPSHOT'
ext.junitVer        = '4.12'

configurations.all {
    resolutionStrategy {
       failOnVersionConflict()
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/releases" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://maven.java.net/content/repositories/snapshots' }
    maven { url 'http://www.allanbank.com/repo/' }
    maven { url 'http://repo.springsource.org/libs-milestone' }
}

configurations {
    provided
}

sourceSets {
    main.compileClasspath = main.compileClasspath + configurations.provided
    test.compileClasspath = test.compileClasspath + configurations.provided
    test.runtimeClasspath = test.runtimeClasspath + configurations.provided

    jdk7 {
        java {
            srcDir 'src/main/java'
        }
            
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
    jdk8 {
        java {
            srcDir 'src/main/java'
        }
            
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

compileJdk7Java {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}

compileJdk8Java {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

dependencies {
    jdk7Compile "co.paralleluniverse:quasar-core:$quasarVer"
    jdk8Compile "co.paralleluniverse:quasar-core:$quasarVer:jdk8"

    provided "co.paralleluniverse:quasar-core:$quasarVer"

    testCompile "junit:junit:$junitVer"
}

def ssets = [sourceSets.jdk7]
if(ext.java8) {
    ssets += sourceSets.jdk8
}
ssets.each { set ->
    def jarTask = task("${set.name}Jar", type: Jar) {
        from set.output
        from { project.configurations["${set.name}Runtime"].collect { it.isDirectory() ? it : zipTree(it) } }

        manifest {
            attributes (
                "Built-By"                  :   System.getProperty("user.name"),
                "Implementation-Title"      :   project.name,
                "Implementation-Version"    :   version,
                "Implementation-Vendor"     :   vendor,
                "Premain-Class"             :   "co.paralleluniverse.fibers.instrument.JavaAgent",
                "Agent-Class"               :   "co.paralleluniverse.fibers.instrument.JavaAgent",
                "Can-Retransform-Classes"   :   "true",
                "Can-Redefine-Classes"      :   "true",
                //  "Class-Path"                :   configurations.runtime.collect { "lib/"+it.getName() }.join(',')
            )
        }
    }

    artifacts {
        archives jarTask
    }

    assemble.dependsOn jarTask
}

if (ext.java8) {
    jdk8Jar {
        classifier = 'jdk8'
    }
}

test {
    beforeTest { desc ->
        logger.quiet("Running test: " + desc)
    }

    afterTest { desc, result ->
        if(result.resultType == TestResult.ResultType.FAILURE) {
            logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
            if(result.exception != null) {
                result.exception.printStackTrace()
            }
        }
    }
}

test.dependsOn 'assemble'

tasks.withType(Test) {
    useJUnit()
    systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
    jvmArgs "-javaagent:${quasarFatJar}" // =vdmc (verbose, debug, allow monitors, check class)

    doLast() {
        println "file://" + getReports().getHtml().getDestination() + "/index.html"
    }
}

defaultTasks 'test'
